<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Posts on Gradient Ascent </title>
    <link>http://navinpai.github.io/ga/post/</link>
    <language>en-us</language>
    <author>Alexander Ivanov</author>
    <updated>2016-12-04 00:00:00 &#43;0000 UTC</updated>
    
    <item>
      <title>Image to Image Translation</title>
      <link>http://navinpai.github.io/ga/post/image-to-image-translation/</link>
      <pubDate>Sun, 04 Dec 2016 00:00:00 UTC</pubDate>
      <author>Alexander Ivanov</author>
      <guid>http://navinpai.github.io/ga/post/image-to-image-translation/</guid>
      <description>&lt;p&gt;&lt;em&gt;Generative Adversarial Networks&lt;/em&gt; really took the field by storm sometime last year when the iconic &lt;a href=&#34;https://arxiv.org/abs/1511.06434&#34;&gt;Unsupervised Representation Learning with Deep Convolutional Generative Adversarial Networks&lt;/a&gt; was published. Since then, every couple of weeks you&amp;rsquo;re sure to come across some application using the core DCGAN to create something astonishing. A couple of days back, a couple of researchers over at &lt;strong&gt;BAIR&lt;/strong&gt; came up with one such result.&lt;/p&gt;

&lt;p&gt;Their paper, titled &lt;a href=&#34;https://arxiv.org/abs/1611.07004&#34;&gt;Image-to-Image Translation with Conditional Adversarial Networks&lt;/a&gt;, applies the GAN model to translate between different representations of images. What I personally found interesting was that in their paper, they use a single network to do general-purpose translation. Just a couple years ago, even translating between 2 classes of respresentations required a crazy amount of model tuning, but GANs have truly risen up to the challenge.&lt;/p&gt;

&lt;p&gt;What I really liked about this paper is that it feels like this paper was written by an engineer at heart. Not only is there a &lt;a href=&#34;https://phillipi.github.io/pix2pix/&#34;&gt;Github repo&lt;/a&gt; with some really clean code, but the paper itself talks about many of the optimisations in the way an engineer, rather than a researcher, would. Let&amp;rsquo;s get to the interesting bits:&lt;/p&gt;

&lt;p&gt;Firstly, they create a U-Net architecture shape, with the basic understanding that the input and output share a lot of low level information.&lt;/p&gt;











  





  


&lt;blockquote&gt;
  &lt;p&gt;
To give the generator a means to circumvent the bot- tleneck for information like this, we add skip connections. Specifically, we add skip connections between each layer i and layer n − i, where n is the total number of layers. Each skip connection simply concatenates all channels at layer i with those at layer n − i.
&lt;/p&gt;
    &lt;strong&gt;&lt;/strong&gt;
    
      
    
&lt;/blockquote&gt;

&lt;p&gt;Next observation: Using just L2/L1 loss creates blurry images because they only capture low frequency correctness, and provide no incentive for high frequency correctness. So, they go on and create a method to allow the discriminator to understand high level correctness.&lt;/p&gt;











  





  


&lt;blockquote&gt;
  &lt;p&gt;
In order to model high-frequencies, it is sufficient to restrict our attention to the structure in local image patches. Therefore, we design a discriminator architecture – which we term a PatchGAN – that only penalizes structure at the scale of patches. This discriminator tries to classify if each N × N patch in an image is real or fake. We run this discriminator convoluta- tionally across the image, averaging all responses to provide the ultimate output of D.
&lt;/p&gt;
    &lt;strong&gt;&lt;/strong&gt;
    
      
    
&lt;/blockquote&gt;

&lt;p&gt;They also use L1 in combination to ensure that the output isn&amp;rsquo;t dominated by the GAN, which tends to make images more colorful (&lt;em&gt;The Deep Dream filter&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s interesting to note that despite training on limited data, the accuracy they got was pretty sweet. Converting maps to aerial photos was trained using just 1096 images, but was able to fool mechanical turksa almost one in every five times, which is impressive, to say the least. I can already imagine use cases for such methods in the design industry, be it for designing clothes, or shoes, or even toys!&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;../images/image-to-image.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Guess which column is generated by a DCGAN&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;Go read the paper, and check out the code as well (&lt;em&gt;I&amp;rsquo;ll probably do another post on the code, if I can get through it soon enough&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://arxiv.org/abs/1611.07004&#34;&gt;Image-to-Image Translation with Conditional Adversarial Networks&lt;/a&gt; by &lt;em&gt;Phillip Isola, Jun-Yan Zhu, Tinghui Zhou and Alexei A. Efros&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tricking your Super-fancy Neural Net</title>
      <link>http://navinpai.github.io/ga/post/tricking-neural-net/</link>
      <pubDate>Wed, 23 Nov 2016 00:00:00 UTC</pubDate>
      <author>Alexander Ivanov</author>
      <guid>http://navinpai.github.io/ga/post/tricking-neural-net/</guid>
      <description>&lt;p&gt;While cleaning up my reading list earlier today, I came across this really cool paper from &lt;strong&gt;CVPR 2015&lt;/strong&gt; with the hard to ignore title: &lt;a href=&#34;https://arxiv.org/abs/1412.1897&#34;&gt;Deep Neural Networks are Easily Fooled&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I think anyone who has been working with Deep Learning systems (&lt;em&gt;or even Machine learning algorithms to a large extent&lt;/em&gt;) has come across multiple examples where you look at the result and wonder &amp;ldquo;&lt;em&gt;How on earth did I get that?&lt;/em&gt;&amp;rdquo;. I have fond memories of one of my projects at &lt;strong&gt;IIIT-B&lt;/strong&gt; which involved sketch classification, where my system was 99% confident that my sketch of an aeroplane was in fact a dog, leading one of my teammates to wonder if the dog was, in fact, inside the plane!&lt;/p&gt;

&lt;p&gt;The somewhat blackbox nature of Deep Learning systems only adds to the mystery, which is why I feel papers like this help provide some context to &amp;ldquo;how&amp;rdquo; we&amp;rsquo;re solving the problem at hand rather than the &amp;ldquo;what&amp;rdquo;.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;../images/tricked-sample.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Such Accurate, Much Wow!&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;For obvious reasons, the question to ask is how do you come up with these trick images?&lt;/p&gt;











  





  


&lt;blockquote&gt;
  &lt;p&gt;
The novel images we test DNNs on are produced by evolutionary algorithms (EAs). EAs are optimization algorithms inspired by Darwinian evolution. They contain a population of &#34;organisms&#34; (here, images) that alternately face selection (keeping the best) and then random perturbation (mutation and/or crossover). Which organisms are selected depends on the fitness function, which in these experiments is the highest prediction value a DNN makes for that image belonging to a class
[...]
Here, fitness is determined by showing the image to the DNN; if the image generates a higher prediction score for any class than has been seen before, the newly generated  individual becomes the champion in the archive for that class.
&lt;/p&gt;
    &lt;strong&gt;&lt;/strong&gt;
    
      
    
&lt;/blockquote&gt;

&lt;p&gt;They use different encodings to generate different types of incorrectly labelled images, including a direct encoding and an indirect encoding.&lt;/p&gt;

&lt;p&gt;Another method they use is also pretty cool. They use gradient ascent (&lt;em&gt;blog name FTW!&lt;/em&gt;) for this:&lt;/p&gt;











  





  


&lt;blockquote&gt;
  &lt;p&gt;
We calculate the gradient of the posterior probability for a specific class - here, a softmax output unit of the DNN - with respect to the input image using backprop, and then we follow the gradient to increase a chosen unitWe calculate the gradient of the posterior probability for a specific class - here, a softmax output unit of the DNN - with respect to the input image using backprop, and then we follow the gradient to increase a chosen unit’s activation.
&lt;/p&gt;
    &lt;strong&gt;&lt;/strong&gt;
    
      
    
&lt;/blockquote&gt;

&lt;p&gt;This technique was earlier described in &lt;a href=&#34;https://arxiv.org/abs/1312.6034&#34;&gt;this paper&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What&amp;rsquo;s interesting is also that these examples use one DNN for generation, but generalize across multiple DNNs, which seems to imply the features recognised are all very similar (&lt;em&gt;which is both good and bad imho&lt;/em&gt;). Absolutely beautiful discussion in the supplementary material as well, I thoroughly enjoyed reading this paper, and you should too!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://arxiv.org/abs/1412.1897&#34;&gt;Deep Neural Networks are Easily Fooled: High Confidence Predictions for Unrecognizable Images&lt;/a&gt; by &lt;em&gt;Anh Nguyen, Jason Yosinski and Jeff Clune&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why Sigmoid Neurons?</title>
      <link>http://navinpai.github.io/ga/post/why-sigmoid-neurons/</link>
      <pubDate>Wed, 09 Nov 2016 00:00:00 UTC</pubDate>
      <author>Alexander Ivanov</author>
      <guid>http://navinpai.github.io/ga/post/why-sigmoid-neurons/</guid>
      <description>&lt;p&gt;When I just started reading about Deep learning, a common thread I kept noticing was the usage of Sigmoid Neurons. It took quite a bit of intuition to figure this out. In fact, I even played around with a couple of different activation functions before slowly figuring out the simplistic beauty of the sigmoid. Today, I came aross the &lt;a href=&#34;https://neuralnetworksanddeeplearning.com/chap1.html&#34;&gt;Neural Networks and Deep Learning&lt;/a&gt; online book, and it did an excellent job of explaining the same:&lt;/p&gt;

&lt;p&gt;For learning purposes, we want one key characteristic of our function:&lt;/p&gt;











  





  


&lt;blockquote&gt;
  &lt;p&gt;
We&#39;d like the network to learn weights and biases so that the output from the network correctly classifies the digit. To see how learning might work, suppose we make a small change in some weight (or bias) in the network. What we&#39;d like is for this small change in weight to cause only a small corresponding change in the output from the network.
&lt;/p&gt;
    &lt;strong&gt;&lt;/strong&gt;
    
      
    
&lt;/blockquote&gt;

&lt;p&gt;And as we know, perceptrons don&amp;rsquo;t work that way!&lt;/p&gt;











  





  


&lt;blockquote&gt;
  &lt;p&gt;
The problem is that this isn&#39;t what happens when our network contains perceptrons. In fact, a small change in the weights or bias of any single perceptron in the network can sometimes cause the output of that perceptron to completely flip, say from 0 to 1.
&lt;/p&gt;
    &lt;strong&gt;&lt;/strong&gt;
    
      
    
&lt;/blockquote&gt;

&lt;p&gt;And which is an almost perfect activation function for the use case we have?&lt;/p&gt;











  





  


&lt;blockquote&gt;
  &lt;p&gt;
What about the algebraic form of What about the algebraic form of σ? How can we understand that? In fact, the exact form of σ isn&#39;t so important - what really matters is the shape of the function when plotted. Here&#39;s the shape:


&lt;figure &gt;
    
        &lt;img src=&#34;../images/sigmoid-function.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;The Sigmoid Function&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


If σ had in fact been a step function, then the sigmoid neuron would be a perceptron, since the output would be 1 or 0 depending on whether w⋅x+bw⋅x+b was positive or negative. [...] The smoothness σ means that small changes Δwj in the weights and Δb in the bias will produce a small change Δoutput in the output from the neuron.
&lt;/p&gt;
    &lt;strong&gt;&lt;/strong&gt;
    
      
    
&lt;/blockquote&gt;

&lt;p&gt;Such a beautiful function explained so eloquently. I&amp;rsquo;d suggest reading &lt;a href=&#34;https://neuralnetworksanddeeplearning.com/chap1.html&#34;&gt;the book&lt;/a&gt; for people just getting their feet wet in the field! It&amp;rsquo;s an amazing resource!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Deconvolution Layer == Convolution Layer?</title>
      <link>http://navinpai.github.io/ga/post/deconv-layer-conv-layer/</link>
      <pubDate>Fri, 14 Oct 2016 00:00:00 UTC</pubDate>
      <author>Alexander Ivanov</author>
      <guid>http://navinpai.github.io/ga/post/deconv-layer-conv-layer/</guid>
      <description>&lt;p&gt;I stumbled across &lt;a href=&#34;https://arxiv.org/abs/1609.07009&#34;&gt;a note&lt;/a&gt; which expands an already brilliant paper: &lt;a href=&#34;https://arxiv.org/abs/1609.05158&#34;&gt;Realtime Image/Video Super Resolution using a Sub-Pixel CNN&lt;/a&gt; (&lt;em&gt;which I really should write about soon&lt;/em&gt;). The note basically tries to answer the question: Is the decovolution layer the same as a convolution layer in Low Resolution (LR) space?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TL;DR: Yes.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Their reasoning was what really caught my eye. The crux of it is:&lt;/p&gt;











  





  


&lt;blockquote&gt;
  &lt;p&gt;
We notice that the different sets of weights in the kernel (1,1,4,4) are activated independently from each other.So we can easily break them into kernels as shown in the figure on the right.This operation is invertible (4,1,2,2) because each set of the weights are independent from each other during the convolution. In our paper,instead of convolving the kernel with the unpooleded sub-pixel image, we notice that the different sets of weights in the kernel (1,1,4,4) are activated independently from each other. So we can easily break them into kernels as shown in the figure on the right.This operation is invertible (4,1,2,2) because each set of the weights are independent from each other during the convolution.In our paper,instead of convolving the kernel with the unpooled sub­pixel image, we convolve (1,1,4,4) the kernel with the LR input directly as illustrated by the following figure.
&lt;/p&gt;
    &lt;strong&gt;&lt;/strong&gt;
    
      
    
&lt;/blockquote&gt;

&lt;p&gt;Another interesting part of the note was the realization that the representation power of a network in LR is mucn more than that in HR (&lt;em&gt;where you first upscale using, say, Bicubic and then pass this as input to the network&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Go on, read the note (&lt;em&gt;and the paper it expands&lt;/em&gt;) and the fascinating breakdown of the logic.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://arxiv.org/abs/1609.07009&#34;&gt;Is the deconvolution layer the same as a convolutional layer?&lt;/a&gt;: &lt;em&gt;Wenzhe Shi, Jose Caballero, Lucas Theis, Ferenc Huszar, Andrew Aitken,Alykhan Tejani, Johannes Totz, Christian Ledig, Zehan Wang&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://arxiv.org/abs/1609.05158&#34;&gt;Real-Time Single Image and Video Super-Resolution Using an Efficient Sub-Pixel Convolutional Neural Network &lt;/a&gt;: &lt;em&gt;Wenzhe Shi, Jose Caballero, Lucas Theis, Ferenc Huszar, Andrew Aitken,Alykhan Tejani, Johannes Totz, Christian Ledig, Zehan Wang&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Batch Normalization in Neural Networks</title>
      <link>http://navinpai.github.io/ga/post/batch-normalization/</link>
      <pubDate>Fri, 07 Oct 2016 00:00:00 UTC</pubDate>
      <author>Alexander Ivanov</author>
      <guid>http://navinpai.github.io/ga/post/batch-normalization/</guid>
      <description>&lt;p&gt;Read a couple of interesting papers today from 2015 about using Batch Normalization in neural networks. Batch Normalization basically means that we normalize each activation individually. The reason for this, quoting the &lt;a href=&#34;https://arxiv.org/abs/1502.03167v3&#34;&gt;original paper&lt;/a&gt;&lt;/p&gt;











  





  


&lt;blockquote&gt;
  &lt;p&gt;
Training Deep Neural Networks is complicated by the fact that the distribution of each layer&#39;s inputs changes during training, as the parameters of the previous layers change. This slows down the training by requiring lower learning rates and careful parameter initialization, and makes it notoriously hard to train models with saturating nonlinearities. We refer to this phenomenon as internal covariate shift.
&lt;/p&gt;
    &lt;strong&gt;&lt;/strong&gt;
    
      
    
&lt;/blockquote&gt;

&lt;p&gt;Their paper is a fascinting deep dive into the math of how layers are affected by the input, and how this covariate shift can be reduced by applying batch normalizations. Using batch normalization means we can use higher learning rates (since gradients do not explode or vanish), making the network more resilient. In fact, in their results they showed how they could use the batch normalized network to achieve the same accuracy as the vanilla network with half the training steps, and with higher learning rates upto 14x fewer steps!&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;../images/batch-norm.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;The Batch Normalization Transform&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;This paper set up a bunch of other interesting papers which explored the same concept of batch normalization, and I&amp;rsquo;ll talk about two of them below.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://arxiv.org/abs/1510.01378&#34;&gt;first one&lt;/a&gt; notes that the original paper applies only to feed forward neural networks and attempts to explore batch normalization in Recurrent Neural Networks. They apply batch normalization on the input-to-hidden transition and oberved faster training and greater overfitting as well. The fact that the generalization performance didn&amp;rsquo;t seem to improve with batch normalization was opposite to what was seen for feedforward neural nets.&lt;/p&gt;

&lt;p&gt;However, a couple of months ago, &lt;a href=&#34;https://arxiv.org/abs/1603.09025v4&#34;&gt;another paper&lt;/a&gt; visited the same idea albeit in a slightly different manner &lt;em&gt;(in fact one of the authors is on both the papers)&lt;/em&gt;. Instead of applying the normalization on the input-to-hidden transition, they apply it horizontally between timesteps, using the consideration that RNNs are deepest in the time direction. Lo and behold, they now have the state of the art results (greater generalizability) with lesser convergence time.&lt;/p&gt;

&lt;p&gt;Truly an excellent set of papers exploring what seems, at first read, as a minor modification to an algorithm. Go on, read the papers!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://arxiv.org/abs/1502.03167v3&#34;&gt;Batch Normalization: Accelerating Deep Network Training by Reducing Internal Covariate Shift&lt;/a&gt; &lt;em&gt;Sergey Ioffe, Christian Szegedy&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://arxiv.org/abs/1510.01378&#34;&gt;Batch Normalized Recurrent Neural Networks&lt;/a&gt; &lt;em&gt;César Laurent, Gabriel Pereyra, Philémon Brakel, Ying Zhang, Yoshua Bengio&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://arxiv.org/abs/1603.09025v4&#34;&gt;Recurrent Batch Normalization&lt;/a&gt; &lt;em&gt;Tim Cooijmans, Nicolas Ballas, César Laurent, Çağlar Gülçehre, Aaron Courville&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How Convolutional Neural Networks Work</title>
      <link>http://navinpai.github.io/ga/post/how-cnns-work/</link>
      <pubDate>Wed, 28 Sep 2016 00:00:00 UTC</pubDate>
      <author>Alexander Ivanov</author>
      <guid>http://navinpai.github.io/ga/post/how-cnns-work/</guid>
      <description>
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/FmpDIaiMIeA&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
 &lt;/div&gt;


&lt;p&gt;Understanding convolutions is the basic foundation to understand how CNNs work. Unfortunately, a lot of literature that exists jumps directly into the math without first trying to explain intuitively what convolutions are, and how they can be used for Deep Learning applications.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/_brohrer_&#34;&gt;Brandon Rohrer&lt;/a&gt; from Microsoft put out an amazing video (&lt;em&gt;and an associated blog post&lt;/em&gt;) trying to provide an intuitive explanation of the same.&lt;/p&gt;

&lt;p&gt;Some quick notes:










  





  


&lt;blockquote&gt;
  &lt;p&gt;
  When presented with a new image, the CNN doesnWhen presented with a new image, the CNN doesn’t know exactly where these features will match so it tries them everywhere, in every possible position. In calculating the match to a feature across the whole image, we make it a filter. The math we use to do this is called convolution, from which Convolutional Neural Networks take their name.âWhen presented with a new image, the CNN doesn’t know exactly where these features will match so it tries them everywhere, in every possible position. In calculating the match to a feature across the whole image, we make it a filter. The math we use to do this is called convolution, from which Convolutional Neural Networks take their name.t know exactly where these features will match so it tries them everywhere, in every possible position. In calculating the match to a feature across the whole image, we make it a filter. The math we use to do this is called convolution, from which Convolutional Neural Networks take their name.
&lt;/p&gt;
    &lt;strong&gt;&lt;/strong&gt;
    
      
    
&lt;/blockquote&gt;&lt;/p&gt;

&lt;p&gt;









  





  


&lt;blockquote&gt;
  &lt;p&gt;
Pooling is a way to take large images and shrink them down while preserving the most important information in them. [...]. It consists of stepping a small window across an image and taking the maximum value from the window at each step. In practice, a window 2 or 3 pixels on a side and steps of 2 pixels work well.
&lt;/p&gt;
    &lt;strong&gt;&lt;/strong&gt;
    
      
    
&lt;/blockquote&gt;&lt;/p&gt;











  





  


&lt;blockquote&gt;
  &lt;p&gt;
[on Backpropogation:] Each image the CNN processes results in a vote. The amount of wrongness in the vote, the error, tells us how good our features and weights are. The features and weights can then be adjusted to make the error less. Each value is adjusted a little higher and a little lower, and the new error computed each time. Whichever adjustment makes the error less is kept. After doing this for every feature pixel in every convolutional layer and every weight in every fully connected layer, the new weights give an answer that works slightly better for that image.
&lt;/p&gt;
    &lt;strong&gt;&lt;/strong&gt;
    
      
    
&lt;/blockquote&gt;

&lt;p&gt;And finally, something that really shows how we&amp;rsquo;re just at the beginning of the deep learning revolution, especially when have hundreds of hidden layers in the network:&lt;/p&gt;











  





  


&lt;blockquote&gt;
  &lt;p&gt;
With so many combinations and permutations, only a small fraction of the possible CNN configurations have been tested. CNN designs tend to be driven by accumulated community knowledge, with occasional deviations showing surprising jumps in performance.
&lt;/p&gt;
    &lt;strong&gt;&lt;/strong&gt;
    
      
    
&lt;/blockquote&gt;

&lt;p&gt;I&amp;rsquo;d highly recommend you take the time out to read the blog post and/or watch the accompanying video.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://brohrer.github.io/how_convolutional_neural_networks_work.html&#34;&gt;Brandon Rohrer&amp;rsquo;s blog&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Welcome to Gradient Ascent</title>
      <link>http://navinpai.github.io/ga/post/welcome/</link>
      <pubDate>Wed, 28 Sep 2016 00:00:00 UTC</pubDate>
      <author>Alexander Ivanov</author>
      <guid>http://navinpai.github.io/ga/post/welcome/</guid>
      <description>&lt;p&gt;Welcome to Gradient Ascent. This is a Machine Learning/Deep Learning blog written by me, &lt;a href=&#34;http://lifeofnav.in&#34;&gt;Navin Pai&lt;/a&gt;. I graduated in 2015 from the &lt;a href=&#34;http://www.iiitb.ac.in&#34;&gt;International Institute of Information Technology - Bangalore&lt;/a&gt; and am currently working as Data Engineer at &lt;a href=&#34;http://www.bloomreach.com&#34;&gt;Bloomreach Inc.&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been fascinated by the world of ML/DL for the last few years, and like every other Computer Science researcher, I&amp;rsquo;m trying to stay up to date with the latest in this rapidly changing field.&lt;/p&gt;

&lt;p&gt;This blog is simply an attempt to document that journey. The idea is to document  a good mix of both research papers as well as code, to develop an overall understanding of the directions we&amp;rsquo;re moving in, not just as researchers but as industry experts as well.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;../images/choose-your-pill.jpg&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;So what are we waiting for? Choose your pill!&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;

</description>
    </item>
    
  </channel>
</rss>
