<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>The GSoC Diaries</title><link href="http://navinpai.github.io/gsoc-blog/" rel="alternate"></link><link href="http://navinpai.github.io/gsoc-blog/feeds/gsoc.atom.xml" rel="self"></link><id>http://navinpai.github.io/gsoc-blog/</id><updated>2015-05-08T10:19:00+02:00</updated><entry><title>facet_loader.py</title><link href="http://navinpai.github.io/gsoc-blog/facet-loader.html" rel="alternate"></link><updated>2015-05-08T10:19:00+02:00</updated><author><name>Navin Pai</name></author><id>tag:navinpai.github.io,2015-05-08:gsoc-blog/facet-loader.html</id><summary type="html">&lt;p&gt;Next up, I'm looking at &lt;strong&gt;facet_loader.py&lt;/strong&gt;, which runs the Elasticsearch facet manager&lt;/p&gt;
&lt;h4&gt;How to run&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# bin/facet_loader.py -s &amp;lt;source-URI&amp;gt; -d &amp;lt;destination-URI&amp;gt; -l &amp;lt;limit-num&amp;gt; -c &amp;lt;config-file&amp;gt; &lt;/span&gt;
&lt;span class="nb"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;facet_loader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;localhost&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;9300&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;jsonpedia_test_load&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;en&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="n"&gt;localhost&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;9300&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;jsonpedia_test_facet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;en&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;faceting&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;properties&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;facet_loader.py&lt;/strong&gt; is a strightforward script which calls:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;MAVEN_OPTS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-Xms8g -Xmx8g -Dlog4j.configuration=file:conf/log4j.properties&amp;#39;&lt;/span&gt; mvn &lt;span class="nb"&gt;exec&lt;/span&gt;:java -Dexec.mainClass&lt;span class="o"&gt;=&lt;/span&gt;com.machinelinking.cli.facetloader -Dexec.args&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-s localhost:9300:jsonpedia_test_load:en -d localhost:9300:jsonpedia_test_facet:en -l 100 -c conf/faceting.properties&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The facetloader class does the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create &lt;code&gt;fromStorage&lt;/code&gt; and &lt;code&gt;facetStorage&lt;/code&gt; instance of &lt;code&gt;ElasticJSONStorage&lt;/code&gt; using the &lt;code&gt;ElasticJSONStorageFactory&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Create an instance of &lt;code&gt;DefaultElasticFacetConfiguration&lt;/code&gt; and &lt;code&gt;DefaultElasticFacetManager&lt;/code&gt; using this configuration.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;loadFacets&lt;/code&gt; method of the &lt;code&gt;ElasticFacetManager&lt;/code&gt; is called, which converts each document from the &lt;code&gt;fromStorage&lt;/code&gt; using the provided &lt;code&gt;EnrichedEntityFacetConverter&lt;/code&gt; and puts it into the &lt;code&gt;destinationStorage&lt;/code&gt;. The converter is simply going through each document, and creating documents out of each section of the original document&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;So this means...&lt;/h4&gt;
&lt;p&gt;Now, we have elasticsearch documents for each section available with details such as &lt;code&gt;page&lt;/code&gt;,&lt;code&gt;section&lt;/code&gt;,&lt;code&gt;links&lt;/code&gt;, &lt;code&gt;content_stem&lt;/code&gt; etc.&lt;/p&gt;
&lt;p&gt;Next up, I'll be looking at the  CSV Export workflow and deep-diving into the code.&lt;/p&gt;
&lt;p&gt;Also, I need to start work on a couple of issues in the issue tracker &lt;em&gt;(which has been long delayed at this point)&lt;/em&gt;&lt;/p&gt;</summary><category term="gsoc"></category><category term="dbpedia"></category></entry><entry><title>loader.py</title><link href="http://navinpai.github.io/gsoc-blog/loader-py.html" rel="alternate"></link><updated>2015-05-06T11:30:00+02:00</updated><author><name>Navin Pai</name></author><id>tag:navinpai.github.io,2015-05-06:gsoc-blog/loader-py.html</id><summary type="html">&lt;p&gt;I've started going through &lt;a href="https://bitbucket.org/hardest/jsonpedia"&gt;the codebase&lt;/a&gt; in a more structured manner, and thought that following workflows would be a good way to start. I plan to understand all the flows over the next few days. For a start, here's what happens when you run loader.py&lt;/p&gt;
&lt;h4&gt;How to run&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# bin/loader.py config-file [start-index:]end-index&lt;/span&gt;
&lt;span class="nb"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;loader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;properties&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;loader.py&lt;/strong&gt; is a Python script which basically does the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Download the URLs for Wikipedia Dumps from the &lt;a href="http://dumps.wikimedia.org/enwiki/latest/"&gt;wikimedia dumps page&lt;/a&gt; using &lt;code&gt;get_latest_articles_list()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Download the required dumps using the end-index &lt;em&gt;(and start-index, if provided)&lt;/em&gt; into the work directory using &lt;code&gt;download_file(url, directory, filename)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Ingest the file using &lt;code&gt;ingest_file(config, filename)&lt;/code&gt; which basically spawns a subprocess that runs &lt;code&gt;gradle runLoader -Pconfig=config -Pdump=filename 2&amp;gt;&amp;amp;1 &amp;gt; filename.log&lt;/code&gt;&lt;ol&gt;
&lt;li&gt;runLoader is a gradle task which calls &lt;code&gt;com.machinelinking.cli.loader&lt;/code&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;flags&lt;/code&gt; is a list of &lt;code&gt;Flag&lt;/code&gt;, each of which enables or disables Extractors, Linkers, Splitters, Validators etc. Default config file has &lt;code&gt;Extractors, Structure&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jsonStorageFactory&lt;/code&gt; is an instance of the JSONStorageFactory. we use to store. Default config file has &lt;code&gt;com.machinelinking.storage.MultiJSONStorageFactory&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jsonStorageConfig&lt;/code&gt; is of form &lt;code&gt;&amp;lt;store-factory 1&amp;gt;|&amp;lt;loader.storage.config 1&amp;gt;;&amp;lt;store-factory 2&amp;gt;|&amp;lt;loader.storage.config 2&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prefixURL&lt;/code&gt; is simply a prefix URL.&lt;/li&gt;
&lt;li&gt;Finally, we call &lt;code&gt;loader[0].load(prefixURL, inputstream)&lt;/code&gt; which internally calls &lt;code&gt;process(prefixURL, inputstream)&lt;/code&gt; of    &lt;code&gt;WikiDumpMultiThreadProcessor&lt;/code&gt; which uses a SAX parser (in &lt;code&gt;WikiDumpParser&lt;/code&gt;) to parse the data.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WikiDumpRunnable&lt;/code&gt; calls the &lt;code&gt;processPage(pagePrefix, threadid,page)&lt;/code&gt; function which uses the over-riden &lt;code&gt;processPage()&lt;/code&gt; method of the nested &lt;code&gt;EnrichmentProcessor&lt;/code&gt;, which adds the document into the Mongostorage using the &lt;code&gt;MongoDBDataEncoder dataEncoder&lt;/code&gt; and &lt;code&gt;JSONStorageConnection connection&lt;/code&gt; after it is enriched using &lt;code&gt;enrichEntity(DocumentSource source, Serializer serializer)&lt;/code&gt; method of &lt;code&gt;WikiPipeline&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;So this means...&lt;/h4&gt;
&lt;p&gt;That's a of stuff happening under the hood i.e at step 3. :-)&lt;/p&gt;
&lt;p&gt;However, at the end of this simple command, we have achieved quite a bit.&lt;/p&gt;
&lt;p&gt;That's all for now... Next up, I'll be looking at &lt;code&gt;facet_loader.py&lt;/code&gt; and the CSV Export workflows.&lt;/p&gt;
&lt;h4&gt;Random Code-fu&lt;/h4&gt;
&lt;p&gt;I learnt about the &lt;a href="http://java.dzone.com/articles/java-7-new-try-resources"&gt;try-with-resources&lt;/a&gt; statement while going through the codebase today. With this type of &lt;em&gt;try&lt;/em&gt;, we can actually provide closeable resources to the block, which are automatically closed after the try. Pretty nifty indeed. An example in &lt;code&gt;loader.java&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;JSONStorage&lt;/span&gt; &lt;span class="n"&gt;storage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;jsonStorageFactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;createStorage&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;storageConfig&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;loader&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;DefaultJSONStorageLoader&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;WikiPipelineFactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getInstance&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;flags&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;storage&lt;/span&gt;
                &lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;StorageLoaderReport&lt;/span&gt; &lt;span class="n"&gt;report&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;loader&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="na"&gt;load&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefixURL&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FileUtil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;openDecompressedInputStream&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dumpFile&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;

    &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;err&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Loading report: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;report&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;finalReportProduced&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="gsoc"></category><category term="dbpedia"></category></entry><entry><title>Hello World</title><link href="http://navinpai.github.io/gsoc-blog/hello-world.html" rel="alternate"></link><updated>2015-05-03T10:23:00+02:00</updated><author><name>Navin Pai</name></author><id>tag:navinpai.github.io,2015-05-03:gsoc-blog/hello-world.html</id><summary type="html">&lt;p&gt;Hey there!&lt;/p&gt;
&lt;p&gt;I'm Navin, and this is where I will be posting updates about the stuff I learn/explore as part of GSoC 2015. &lt;/p&gt;
&lt;p&gt;I'm going to be working with the fine people at the DBpedia project &lt;em&gt;(to be more specific, the JSONpedia project)&lt;/em&gt; and will be working on enhancing the extractors used for extracting information from Wikipedia.&lt;/p&gt;
&lt;p&gt;For a quick overview of my project, visit &lt;a href="https://www.google-melange.com/gsoc/project/details/google/gsoc2015/lifeofnavin/5676830073815040"&gt;my project proposal page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Other quick links are in the left menu.&lt;/p&gt;</summary><category term="gsoc"></category><category term="dbpedia"></category></entry></feed>